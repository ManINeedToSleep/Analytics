/**
 * @file ai-reports.tsx
 * @description Simplified AI reports component for general analysis export.
 * Focuses on general platform insights rather than specific detailed reports.
 */
"use client"

import { useState } from "react"
import { FileText, Download, Calendar, Loader2 } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import type { AIInsightResponse } from "@/lib/ai-service"
import { cn } from "@/lib/utils"

interface AnalysisReport {
  id: string
  title: string
  type: "general" | "insights" | "metrics"
  createdAt: Date
  status: "generating" | "ready"
  insightCount: number
}

interface AIReportsProps {
  insights: AIInsightResponse[]
  aiServiceStatus: {
    configured: boolean
    baseUrl: string
    hasApiKey: boolean
  }
}

export function AIReports({ insights, aiServiceStatus }: AIReportsProps) {
  const [reports, setReports] = useState<AnalysisReport[]>([
    {
      id: "1",
      title: "Platform Analytics Summary",
      type: "general",
      createdAt: new Date(Date.now() - 86400000),
      status: "ready",
      insightCount: 12,
    },
    {
      id: "2", 
      title: "AI Insights Export",
      type: "insights",
      createdAt: new Date(Date.now() - 172800000),
      status: "ready",
      insightCount: insights.length,
    },
  ])
  const { toast } = useToast()

  const generateGeneralReport = async () => {
    const newReport: AnalysisReport = {
      id: Date.now().toString(),
      title: "Platform Analytics Summary",
      type: "general",
      createdAt: new Date(),
      status: "generating",
      insightCount: 0,
    }

    setReports(prev => [newReport, ...prev])

    // Simulate report generation
    setTimeout(() => {
      setReports(prev =>
        prev.map(report => 
          report.id === newReport.id 
            ? { ...report, status: "ready" as const, insightCount: insights.length + 5 }
            : report
        )
      )
      toast({
        title: "Report Generated",
        description: "Your platform analytics summary is ready for download.",
      })
    }, 2000)
  }

  const exportReport = (reportId: string) => {
    const report = reports.find(r => r.id === reportId)
    if (!report) return

    // General platform metrics
    const platformMetrics = {
      totalUsers: 45231,
      activeUsers: 32156,
      profileCompletionRate: 72.7,
      totalCommunities: 127,
      activeCommunities: 89,
      monthlyGrowthRate: 12.5,
      engagementRate: 64.0,
      averageSessionDuration: 12.5,
      eventAttendanceRate: 43.8,
      weeklyRetentionRate: 68.0,
      mrr: 12450,
      trialConversionRate: 18.5,
    }

    let csvContent = ""

    if (report.type === "general") {
      csvContent = `RYLA Analytics Platform Summary
Generated: ${report.createdAt.toLocaleDateString()}
AI Service: ${aiServiceStatus.configured ? 'RYLA Private AI' : 'Mock Data'}

=== PLATFORM OVERVIEW ===
Total Users: ${platformMetrics.totalUsers.toLocaleString()}
Active Users: ${platformMetrics.activeUsers.toLocaleString()}
Profile Completion Rate: ${platformMetrics.profileCompletionRate}%
Monthly Growth Rate: ${platformMetrics.monthlyGrowthRate}%
User Engagement Rate: ${platformMetrics.engagementRate}%

=== COMMUNITY METRICS ===
Total Communities: ${platformMetrics.totalCommunities}
Active Communities: ${platformMetrics.activeCommunities}
Average Session Duration: ${platformMetrics.averageSessionDuration} minutes
Event Attendance Rate: ${platformMetrics.eventAttendanceRate}%

=== RETENTION & REVENUE ===
Weekly Retention Rate: ${platformMetrics.weeklyRetentionRate}%
Monthly Recurring Revenue: $${platformMetrics.mrr.toLocaleString()}
Trial Conversion Rate: ${platformMetrics.trialConversionRate}%

=== TOP AI INSIGHTS ===
${insights.slice(0, 5).map((insight, index) => 
  `${index + 1}. ${insight.title} (${insight.priority} priority)
   ${insight.summary}
   Action: ${insight.actionableRecommendations[0]}
`).join('\n')}

Report generated by RYLA AI Analytics Engine`
    } else {
      csvContent = `RYLA AI Insights Export
Generated: ${report.createdAt.toLocaleDateString()}
AI Service: ${aiServiceStatus.configured ? 'RYLA Private AI' : 'Mock Data'}

=== AI INSIGHTS SUMMARY ===
Total Insights: ${insights.length}
High Priority: ${insights.filter(i => i.priority === 'high' || i.priority === 'critical').length}
Average Confidence: ${Math.round(insights.reduce((sum, i) => sum + i.confidence, 0) / insights.length * 100) || 0}%

=== DETAILED INSIGHTS ===
${insights.map((insight, index) => 
  `${index + 1}. ${insight.title}
   Type: ${insight.type}
   Priority: ${insight.priority}
   Confidence: ${Math.round(insight.confidence * 100)}%
   Summary: ${insight.summary}
   Recommendations: ${insight.actionableRecommendations.join('; ')}
   ${insight.affectedCommunities ? `Communities: ${insight.affectedCommunities.join(', ')}` : ''}
   Timestamp: ${new Date(insight.timestamp).toLocaleString()}
`).join('\n')}

Export generated by RYLA AI Analytics Engine`
    }

    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `ryla_${report.type}_${report.createdAt.toISOString().split('T')[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)

    toast({
      title: "Report Downloaded",
      description: "Your analysis report has been downloaded successfully.",
    })
  }

  const getStatusColor = (status: AnalysisReport["status"]) => {
    switch (status) {
      case "ready":
        return "bg-green-500/20 text-green-300 border-green-500/30"
      case "generating":
        return "bg-amber-500/20 text-amber-300 border-amber-500/30"
      default:
        return "bg-neutral-500/20 text-neutral-300 border-neutral-500/30"
    }
  }

  return (
    <div className="space-y-6">
      {/* Quick Export Actions */}
      <div className="grid gap-4 grid-cols-1 md:grid-cols-2">
        <Card className="bg-neutral-900 text-white border-neutral-700/50">
          <CardHeader>
            <CardTitle className="text-lg">ðŸ“Š Platform Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-neutral-400 mb-4">
              Export a comprehensive overview of all platform metrics and key insights.
            </p>
            <Button 
              onClick={generateGeneralReport}
              className="w-full bg-purple-600 hover:bg-purple-700 text-white"
            >
              <FileText className="mr-2 h-4 w-4" />
              Generate Platform Report
            </Button>
          </CardContent>
        </Card>

        <Card className="bg-neutral-900 text-white border-neutral-700/50">
          <CardHeader>
            <CardTitle className="text-lg">ðŸ§  AI Insights</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-neutral-400 mb-4">
              Export all AI-generated insights with recommendations and priority levels.
            </p>
            <Button 
              onClick={() => exportReport("2")}
              variant="outline"
              className="w-full bg-neutral-800 border-neutral-700 text-neutral-300 hover:bg-neutral-700 hover:text-white"
            >
              <Download className="mr-2 h-4 w-4" />
              Export Insights ({insights.length})
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* Recent Reports */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-semibold text-white">Recent Exports</h3>
          <Badge className="bg-neutral-700 text-neutral-300">
            {reports.length} reports
          </Badge>
        </div>
        
        <div className="grid gap-4">
          {reports.map((report) => (
            <Card key={report.id} className="bg-neutral-900 text-white border-neutral-700/50 hover:border-neutral-600/80 transition-all">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <FileText className="h-8 w-8 text-blue-400" />
                    <div>
                      <h4 className="font-medium text-lg">{report.title}</h4>
                      <div className="flex items-center gap-2 mt-1">
                        <Calendar className="h-4 w-4 text-neutral-400" />
                        <span className="text-sm text-neutral-400">
                          {report.createdAt.toLocaleDateString()}
                        </span>
                        <Badge variant="outline" className="text-xs border-neutral-600 text-neutral-300">
                          {report.type}
                        </Badge>
                      </div>
                      <p className="text-sm text-neutral-400 mt-1">
                        {report.insightCount} data points included
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <Badge className={cn("text-xs border", getStatusColor(report.status))}>
                      {report.status === "generating" && <Loader2 className="h-3 w-3 animate-spin mr-1" />}
                      {report.status}
                    </Badge>
                    
                    {report.status === "ready" && (
                      <Button 
                        size="sm" 
                        variant="outline" 
                        onClick={() => exportReport(report.id)}
                        className="bg-neutral-800 border-neutral-700 text-neutral-300 hover:bg-neutral-700 hover:text-white"
                      >
                        <Download className="h-4 w-4 mr-1" />
                        Download
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )
} 